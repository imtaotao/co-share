<template>
  <div>
    <div
      data-x='-15000'
      data-rotate-z='90'
      id='asyncFunctionOne'
      styleName='title'
      className='step pure-text'
    >
      <div styleName='left-title more-text'>
        ES2017 标准引入了 async 函数，使得异步操作变得更加方便
      </div>
      <div styleName='left-title more-text'>
        async 函数是什么？它就是 Generator 函数的语法糖
      </div>
    </div>

    <div
      data-x='-15000'
      data-rotate-z='90'
      styleName='title'
      id='asyncFunctionTwo'
      className='step pure-text'
    >
      <div styleName='left-title'>做个对比，理解一下为什么说是语法糖</div>

      <pre
        v-lighlight
        styleName='small-code'
        className='hljs pure-code half'
      >
        <code>{{ this.filterCode(codeOne[0]) }}</code>
      </pre>

       <pre
        v-lighlight
        styleName='small-code'
        className='hljs pure-code half'
      >
      <code>{{ this.filterCode(codeOne[1]) }}</code>
      </pre>
    </div>

    <div
      data-x='-15000'
      data-rotate-z='90'
      id='asyncFunctionThree'
      className='step pure-text'
    >
      <pre
        v-lighlight
        styleName='small-code'
        className='hljs pure-code half'
      >
        <code>{{ this.filterCode(codeTwo[0]) }}</code>
      </pre>

       <pre
        v-lighlight
        styleName='small-code'
        className='hljs pure-code half'
      >
        <code>{{ this.filterCode(codeTwo[1]) }}</code>
      </pre>
    </div>
  </div>
</template>

<script>
  const Grass = require('@Grass')
  const style = require('../style.css')
  module.exports = Grass.CSSModules(style)(
    class AsyncFunction extends Grass.Component {
      // #temp
      constructor () {
        super()
        this.state = {
          codeOne: [
            ` 
            const ret = (async function () {
              const a = await fn(1)
              const b = await fn(a + 1)
              const c = await fn(b + 1)
              const d = await fn(c + 1)
              return d
            })()
            ret.then(v => console.log(v))`,

            `
            const ret = co(function * () {
              const a = yield fn(1)
              const b = yield fn(a + 1)
              const c = yield fn(b + 1)
              const d = yield fn(c + 1)
              return d
            })
            ret.then(v => console.log(v))`,
          ],
          codeTwo: [
            `
            const ret = (async function () {
              try {
                throw 'errorOne'
              } catch (err) {
                console.log(err)
                throw 'errorTwo'
              }
            })()
            ret.catch(err => console.log(err))`,

            `
            const ret = co(function * () {
              try {
                throw 'errorOne'
              } catch (err) {
                console.log(err)
                throw 'errorTwo'
              }
            })
            ret.catch(err => console.log(err))`,
          ]
        }
      }
    }
  )
</script>